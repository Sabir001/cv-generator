@use "sass:math";
// A map of breakpoints.
$breakpoints: (
  xs: 480px,
  sm: 768px,
  md: 992px,
  lg: 1200px,
  xl: 1400px,
  xxl: 1601px,
);
// all available unit could be use.
$units: px, em, rem, vh, vw;

// check unit valid or not
@function get-valid-unit($breakpoint) {
  // default result
  $result: false;
  // loop the units and check each
  @each $unit in $units {
    // if breakpoint contain valid unit return true
    @if (math.unit($breakpoint) == $unit) {
      $result: true;
    } @else if not ($result) {
      $result: false;
    }
  }
  @return $result;
}

//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––
@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }
    // If the breakpoint doesn't exist in the map and If the breakpoint contain a valid unit.
  } @else if get-valid-unit($breakpoint) {
    // Write the media query.
    @media (min-width: $breakpoint) {
      @content;
    }
  }
  // If the breakpoint doesn't contain a valid unit.
  @else {
    // Log a error.
    @error 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––
@mixin respond-below($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    // Write the media query.
    @media (max-width: ($breakpoint-value - 0.02)) {
      @content;
    }
    // If the breakpoint doesn't exist in the map and If the breakpoint contain a valid unit.
  } @else if get-valid-unit($breakpoint) {
    // Write the media query.
    @media (max-width: ($breakpoint - 0.02)) {
      @content;
    }
  }
  // If the breakpoint doesn't contain a valid unit.
  @else {
    // Log a error.
    @error 'Invalid breakpoint: #{$breakpoint}.';
  }
}

//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––
// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 0.02)) {
      @content;
    }
    // If one or both of the breakpoints don't exist.
  } @else if get-valid-unit($lower) and get-valid-unit($upper) {
    // Write the media query.
    @media (min-width: $lower) and (max-width: ($upper - 0.02)) {
      @content;
    }
  } @else {
    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) and
      (get-valid-unit($lower) == false)
    {
      // Log a error.
      @error 'Your lower breakpoint was invalid: #{$lower}.';
    }
    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) and
      (get-valid-unit($upper) == false)
    {
      // Log a error.
      @error 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}
